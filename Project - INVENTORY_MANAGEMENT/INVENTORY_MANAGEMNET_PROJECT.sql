
------------------------------------------------------------INVENTORY MANAGEMENT SYSTEM-----------------------------------------------------------------------

			
			
	
			-------------------------------------------------DATABASE CREATION----------------------------------------------------


CREATE DATABASE INVENTORY;

USE INVENTORY;

			-------------------------------------------------TABLES CREATION----------------------------------------------------


CREATE TABLE SUPPLIER
(
SID CHAR (5),
SNAME VARCHAR(20),
SADD VARCHAR(30),
SCITY VARCHAR(20),
SPHONE CHAR(15),
EMAIL VARCHAR(30)
)

CREATE TABLE PRODUCT
(
PID CHAR(5),
PDESC VARCHAR(40),
PRICE INT,
CATEGORY VARCHAR(15),
SID CHAR(5)
)

CREATE TABLE STOCK
(
PID CHAR(5),
SQTY INT,
ROL INT,
MOQ INT
)

CREATE TABLE ORDERS
(
OID CHAR(5),
ODATE DATE,
PID CHAR(5),
CID CHAR(5),
OQTY INT
)

CREATE TABLE CUST
(
CID CHAR(5),
CNAME VARCHAR(20),
ADDRESS VARCHAR(30),
CITY VARCHAR(20),
PHONE CHAR(15),
CEMAIL VARCHAR(30),
DOB DATE
)

CREATE TABLE PURCHASE
(
PID CHAR(5),
SID CHAR(5),
PQTY INT,
DOP DATE);




			----------------------------------------------------ADDING CONSTRAINTS----------------------------------------------------



ALTER TABLE SUPPLIER
ALTER COLUMN SNAME VARCHAR(20) NOT NULL;

ALTER TABLE SUPPLIER
ALTER COLUMN SID CHAR(5) NOT NULL;

ALTER TABLE SUPPLIER
ADD CONSTRAINT PKSID PRIMARY KEY(SID);

ALTER TABLE SUPPLIER
ADD CONSTRAINT DEF DEFAULT 'DELHI' FOR SCITY;

ALTER TABLE SUPPLIER
ALTER COLUMN SADD VARCHAR(30) NOT NULL;

ALTER TABLE SUPPLIER
ADD CONSTRAINT UNI UNIQUE(SPHONE);



ALTER TABLE PRODUCT
ALTER COLUMN PID CHAR(5) NOT NULL;

ALTER TABLE PRODUCT
ADD CONSTRAINT PKPID PRIMARY KEY(PID);

ALTER TABLE PRODUCT
ALTER COLUMN PDESC VARCHAR(40) NOT NULL;

ALTER TABLE PRODUCT
ADD CONSTRAINT CHKPRICE CHECK (PRICE>0);

ALTER TABLE PRODUCT
ADD CONSTRAINT FKSID FOREIGN KEY (SID) REFERENCES SUPPLIER(SID)
ON DELETE CASCADE;




ALTER TABLE STOCK
ADD CONSTRAINT FKPID FOREIGN KEY (PID) REFERENCES PRODUCT(PID)
ON DELETE CASCADE

ALTER TABLE STOCK
ADD CONSTRAINT CHKSQTY CHECK (SQTY >=0);

ALTER TABLE STOCK
ADD CONSTRAINT CHKROL CHECK (ROL >0);

ALTER TABLE STOCK
ADD CONSTRAINT CHKMOQ CHECK (MOQ>=5);



ALTER TABLE CUST
ALTER COLUMN CID CHAR(5) NOT NULL;

ALTER TABLE CUST
ADD CONSTRAINT PKCID PRIMARY KEY (CID);

ALTER TABLE CUST
ALTER COLUMN CNAME VARCHAR(20) NOT NULL;

ALTER TABLE CUST
ALTER COLUMN ADDRESS VARCHAR(30) NOT NULL;

ALTER TABLE CUST
ALTER COLUMN CITY VARCHAR(20) NOT NULL;

ALTER TABLE CUST
ALTER COLUMN PHONE CHAR(15) NOT NULL;

ALTER TABLE CUST
ALTER COLUMN CEMAIL VARCHAR(30) NOT NULL;

ALTER TABLE CUST
ADD CONSTRAINT CHKDATE CHECK (DOB<'01-JAN-2000');



ALTER TABLE ORDERS 
ALTER COLUMN OID CHAR(5) NOT NULL; 

ALTER TABLE ORDERS
ADD CONSTRAINT OFKPID FOREIGN KEY(PID) REFERENCES PRODUCT(PID)
ON DELETE CASCADE;

ALTER TABLE ORDERS
ADD CONSTRAINT OCFKPID FOREIGN KEY(CID) REFERENCES CUST(CID)
ON DELETE CASCADE;

ALTER TABLE ORDERS
ADD CONSTRAINT CHKOQTY CHECK (OQTY>=1);


			----------------------------------------------------CREATING SEQUENCES----------------------------------------------------


CREATE SEQUENCE SUPPSEQ 
AS INT
START WITH 1
INCREMENT BY 1;

CREATE SEQUENCE PRODSEQ
AS INT
START WITH 1
INCREMENT BY 1;

CREATE SEQUENCE ORDSEQ  
AS INT
START WITH 1
INCREMENT BY 1;

CREATE SEQUENCE CUSTSEQ 
AS INT
START WITH 1
INCREMENT BY 1;

CREATE SEQUENCE PURSEQ
AS INT
START WITH 1
INCREMENT BY 1;


--------------------------------------------------------------------------------------------------------------------------------------


------------------------------------------------------------------CREATING FUCNTIONS---------------------------------------------------------------


CREATE FUNCTION GET_ID(@L AS CHAR(1), @I AS INT)
RETURNS CHAR(5)
AS 
BEGIN
	
	DECLARE @ID AS CHAR(5)  
	
	IF @I < 10
	SET @ID = CONCAT(@L, '000', @I)

	ELSE IF @I < 100
	SET @ID = CONCAT(@L, '00', @I)

	ELSE IF @I < 1000
	SET @ID = CONCAT(@L, '0', @I)

	ELSE IF @I < 10000
	SET @ID = CONCAT(@L, @I)

	ELSE
	SET @ID = 'NA'

	RETURN @ID

END;




---------------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------CREATING PROCEDURES---------------------------------------------------------------

-------- PRODECURE TO FETCH THE DATA FROM ALL THE TABLES IN OUR INVENTORY ------------

CREATE PROCEDURE INVENTORY_DATA
AS
BEGIN

	SELECT * FROM SUPPLIER
	SELECT * FROM PRODUCT
	SELECT * FROM STOCK
	SELECT * FROM ORDERS
	SELECT * FROM CUST
	SELECT * FROM PURCHASE

END;





----PROCEDURE TO ADD SUPPLIER----



CREATE PROCEDURE ADD_SUPP @N AS VARCHAR(20), @A AS VARCHAR(30), @C AS VARCHAR(20), @P AS CHAR(15), @E AS VARCHAR(30)
AS
BEGIN 
	
	DECLARE @I AS INT
	DECLARE @ID AS CHAR(5)

	SET @I = NEXT VALUE FOR SUPPSEQ
	SET @ID = DBO.GET_ID('S', @I)

	INSERT INTO SUPPLIER VALUES(@ID, @N, @A, @C, @P, @E)
	SELECT * FROM SUPPLIER

END;


ADD_SUPP 'Rajesh Traders', 'Sector-2, DLF Phase, Gurugram', 'Gurugram', '9876543210', 'rajesh.traders@gmail.com'
ADD_SUPP 'Mohit Distributors', '23 Madan Nagar, Mathura', 'Mathura', '8765432109', 'mohit.dist@yahoo.com'
ADD_SUPP 'Vikram Enterprises', 'Banjara Hills, Hyderabad', 'Hyderabad', '7654321098', 'vikram.ent@outlook.com'
ADD_SUPP 'Suresh Supplies', 'MG Road, Bengaluru', 'Bengaluru', '6543210987', 'suresh.supplies@gmail.com'
ADD_SUPP 'Neha Exporters', 'Connaught Place, New Delhi', 'Delhi', '5432109876', 'neha.exporters@yahoo.com'
ADD_SUPP 'Priya Agencies', 'Park Street, Kolkata', 'Kolkata', '4321098765', 'priya.agencies@outlook.com'
ADD_SUPP 'Kiran Suppliers', 'Camp Area, Pune', 'Pune', '3210987654', 'kiran.suppliers@gmail.com'
ADD_SUPP 'Anita Goods', 'Indiranagar, Bengaluru', 'Bengaluru', '2109876543', 'anita.goods@yahoo.com'
ADD_SUPP 'Sunil Markets', 'Charminar, Hyderabad', 'Hyderabad', '1098765432', 'sunil.markets@outlook.com'
ADD_SUPP 'Manish Imports', 'Civil Lines, Jaipur', 'Jaipur', '0987654321', 'manish.imports@gmail.com'
ADD_SUPP 'Raj Traders', 'Sector-2, DLF Phase, Gurugram', 'Gurugram', '9876543215', 'rajesh.traders@gmail.com'





----PROCEDURE TO ADD PRODUCT----


CREATE PROCEDURE ADD_PROD @PD AS VARCHAR(40), @P AS INT, @C AS VARCHAR(15), @S AS CHAR(5)
AS
BEGIN
	
	DECLARE @I AS INT 
	DECLARE @ID AS CHAR(5)

	SET @I = NEXT VALUE FOR PRODSEQ
	SET @ID = DBO.GET_ID('P', @I)

	INSERT INTO PRODUCT VALUES(@ID, @PD, @P, @C, @S)
	SELECT * FROM PRODUCT

END;


ADD_PROD 'Laptop', 45000, 'IT', 'S0001'
ADD_PROD 'Refrigerator', 25000, 'HA', 'S0002'
ADD_PROD 'Microwave Oven', 10000, 'HC', 'S0003'
ADD_PROD 'Smartphone', 15000, 'IT', 'S0004'
ADD_PROD 'Air Conditioner', 35000, 'HA', 'S0005'
ADD_PROD 'Water Purifier', 8000, 'HC', 'S0006'
ADD_PROD 'Tablet', 12000, 'IT', 'S0007'
ADD_PROD 'Washing Machine', 20000, 'HA', 'S0008'
ADD_PROD 'Toaster', 1500, 'HC', 'S0009'
ADD_PROD 'Gaming Console', 30000, 'IT', 'S0010'
ADD_PROD 'Mixer Grinder', 5000, 'HA', 'S0001'
ADD_PROD 'Television', 40000, 'HC', 'S0002'
ADD_PROD 'Camera', 25000, 'IT', 'S0003'
ADD_PROD 'Water Heater', 7000, 'HA', 'S0004'
ADD_PROD 'Air Purifier', 15000, 'HC', 'S0005'
ADD_PROD 'Desktop Computer', 60000, 'IT', 'S0006'
ADD_PROD 'Electric Kettle', 2000, 'HA', 'S0007'
ADD_PROD 'Blender', 3000, 'HC', 'S0008'
ADD_PROD 'Sound System', 20000, 'IT', 'S0009'
ADD_PROD 'Hair Dryer', 1000, 'HA', 'S0010'
ADD_PROD 'Water Heater', 7200, 'HA', 'S0004'




----PROCEDURE TO ADD CUSTOMER----



CREATE PROCEDURE ADD_CUST @N AS VARCHAR(20), @A AS VARCHAR(30), @C AS VARCHAR(20), @P AS CHAR(15), @E AS VARCHAR(30), @D AS DATE
AS 
BEGIN 

	DECLARE @I AS INT 
	DECLARE @ID AS CHAR(5)

	SET @I = NEXT VALUE FOR CUSTSEQ
	SET @ID = DBO.GET_ID('C', @I)

	INSERT INTO CUST VALUES(@ID, @N, @A, @C, @P, @E, @D)
	SELECT * FROM CUST

END;


ADD_CUST 'Rajesh Kumar', '10 MG Road, Mumbai', 'Mumbai', '9999999991', 'rajesh.kumar@gmail.com', '1980-12-01'
ADD_CUST 'Mohit Sharma', '22 Park Street, Delhi', 'Delhi', '9999999992', 'mohit.sharma@yahoo.com', '1985-11-02'
ADD_CUST 'Vikram Singh', '5 Nehru Place, Jaipur', 'Jaipur', '9999999993', 'vikram.singh@outlook.com', '1990-10-03'
ADD_CUST 'Anita Desai', '17 Main Road, Bhopal', 'Bhopal', '9999999994', 'anita.desai@gmail.com', '1995-09-04'
ADD_CUST 'Suresh Patel', '45 Residency Road, Surat', 'Surat', '9999999995', 'suresh.patel@yahoo.com', '1970-08-05'
ADD_CUST 'Nidhi Verma', '30 Patel Nagar, Lucknow', 'Lucknow', '9999999996', 'nidhi.verma@outlook.com', '1975-07-06'
ADD_CUST 'Amit Bhatt', '19 Gandhi Chowk, Pune', 'Pune', '9999999997', 'amit.bhatt@gmail.com', '1965-06-07'
ADD_CUST 'Sunil Joshi', '9 Brigade Road, Bengaluru', 'Bengaluru', '9999999998', 'sunil.joshi@yahoo.com', '1960-05-08'
ADD_CUST 'Pooja Mehta', '4 Mission Road, Chennai', 'Chennai', '9999999999', 'pooja.mehta@outlook.com', '1955-04-09'
ADD_CUST 'Ramesh Yadav', '14 Cantonment, Kolkata', 'Kolkata', '9999999990', 'ramesh.yadav@gmail.com', '1950-03-10'
ADD_CUST 'Kuldeep Chauhan', '29/2 Cantonment, Hisar', 'Hisar', '9999999982', 'kuldeep.chauhan@gmail.com', '1978-05-23'






----PROCEDURE TO ADD ORDER----


CREATE PROCEDURE ADD_ORDER @P AS CHAR(5), @C AS CHAR(5), @OQ AS INT
AS 
BEGIN 

	DECLARE @I AS INT 
	DECLARE @ID AS CHAR(5)
	DECLARE @D AS DATE

	SET @I = NEXT VALUE FOR ORDSEQ
	SET @ID = DBO.GET_ID('O', @I)
	SET @D = CONVERT(DATE, GETDATE())

	INSERT INTO ORDERS VALUES(@ID, @D, @P, @C, @OQ)
	SELECT * FROM ORDERS

END;

ADD_ORDER 'P0001', 'C0001', 5
ADD_ORDER 'P0002', 'C0002', 10
ADD_ORDER 'P0003', 'C0003', 15
ADD_ORDER 'P0004', 'C0004', 20
ADD_ORDER 'P0005', 'C0005', 25



--------------------------------------------------------------------------------------------------------------------------------------



----- PROCEDURE TO ADD A STOCK IN STOCK TABLE ----



CREATE PROCEDURE ADD_STOCK @P AS CHAR(5), @SQ INT, @RL AS INT, @MQ AS INT
AS 
BEGIN 

	INSERT INTO STOCK VALUES(@P, @SQ, @RL, @MQ)
	SELECT * FROM STOCK

END;


INSERT INTO STOCK VALUES
('P0001', 50, 10, 9),
('P0002', 60, 15, 5),
('P0003', 70, 20, 12),
('P0004', 80, 25, 6),
('P0005', 90, 30, 10),
('P0006', 100, 35, 8),
('P0007', 110, 40, 9),
('P0008', 120, 45, 14),
('P0009', 130, 50, 7),
('P0010', 140, 55, 8);

ADD_STOCK 'P0002', 55, 15, 45





----- PROCEDURE TO ADD A PURCHASE MADE TO SUPPLIER IN PURCHASE TABLE ------


CREATE PROCEDURE ADD_PURCHASE @S AS CHAR(5), @PQ AS INT
AS
BEGIN

	DECLARE @I AS INT
	DECLARE @ID AS CHAR(5)
	DECLARE @D AS DATE

	SET @I = NEXT VALUE FOR PURSEQ
	SET @ID = DBO.GET_ID('P', @I)
	SET @D = CONVERT(DATE, GETDATE())

	INSERT INTO PURCHASE VALUES(@ID, @S, @PQ, @D)
	SELECT * FROM PURCHASE

END;

ADD_PURCHASE 'S0002', 55


---------- PROCEDURE TO FETCH DAILY REPORT --------------


CREATE PROCEDURE DAILY_REPORT
AS
BEGIN
	
	DECLARE @D AS DATE
	SET @D = CONVERT(DATE, GETDATE())

	SELECT SUPPLIER.SID, SNAME, SPHONE, PDESC, PRICE, OQTY, PRICE*OQTY AS 'AMOUNT', CNAME, PHONE
	FROM SUPPLIER
	JOIN PRODUCT
	ON SUPPLIER.SID = PRODUCT.SID
	JOIN ORDERS
	ON PRODUCT.PID = ORDERS.PID
	JOIN CUST
	ON ORDERS.CID = CUST.CID
	WHERE ODATE = @D;

END;
DAILY_REPORT



----------------- PROCEDURE TO FETCH PRODUCT REPORT -------------------



CREATE FUNCTION PROD_REPORT(@P AS CHAR(5))
RETURNS TABLE
AS
	
	RETURN(SELECT PRODUCT.PID, PDESC, PRICE, SUPPLIER.SID, SNAME, SCITY, ODATE, OQTY, CNAME, CUST.PHONE
		   FROM SUPPLIER
		   JOIN PRODUCT
		   ON SUPPLIER.SID = PRODUCT.SID
		   JOIN STOCK
		   ON PRODUCT.PID = STOCK.PID
		   JOIN ORDERS
		   ON STOCK.PID = ORDERS.PID
		   JOIN CUST
		   ON ORDERS.CID = CUST.CID
		   WHERE PRODUCT.PID = @P);




CREATE PROCEDURE PRODUCT_REPORT @P AS CHAR(5) 
AS
BEGIN
	
	SELECT * FROM DBO.PROD_REPORT(@P)

END;

PRODUCT_REPORT 'P0002' 




------------------- PROCEDURE TO FETCH SUPPLIER REPORT -------------------




CREATE FUNCTION SUPP_REPORT(@S AS CHAR(5)) 
RETURNS TABLE
AS
	
	RETURN(SELECT SUPPLIER.SID, SNAME, PHONE AS 'SUPPLIER PHONE', PRODUCT.PID, PDESC, PRICE, SQTY, ORDERS.OID, ODATE, OQTY, CUST.CID, CNAME, CUST.PHONE AS
	'CUSTOMER PHONE'
	FROM SUPPLIER
	INNER JOIN PRODUCT
	ON SUPPLIER.SID = PRODUCT.SID
	INNER JOIN STOCK 
	ON STOCK.PID = PRODUCT.PID
	INNER JOIN ORDERS
	ON STOCK.PID = ORDERS.PID
	INNER JOIN CUST
	ON ORDERS.CID = CUST.CID
	WHERE SUPPLIER.SID = @S);



CREATE PROCEDURE SUPPLIER_REPORT @S AS CHAR(5)
AS
BEGIN
	
	SELECT * FROM DBO.SUPP_REPORT(@S)
	SELECT PRODUCT.PID, PDESC, PRICE
	FROM PRODUCT
	JOIN SUPPLIER
	ON PRODUCT.SID = SUPPLIER.SID
	WHERE SUPPLIER.SID = @S

END;


SUPPLIER_REPORT 'S0002'





------------------- PROCEDURE TO FETCH CUSTOM TRANSACTION REPORT -------------------



CREATE PROCEDURE GET_TRANSACTION @D AS DATE 
AS
BEGIN

	SELECT SUPPLIER.SID, SNAME, SPHONE, PDESC, PRICE, OQTY, PRICE*OQTY AS 'AMOUNT', CNAME, PHONE
	FROM SUPPLIER
	JOIN PRODUCT
	ON SUPPLIER.SID = PRODUCT.SID
	JOIN ORDERS
	ON PRODUCT.PID = ORDERS.PID
	JOIN CUST
	ON ORDERS.CID = CUST.CID
	WHERE ODATE = @D;

END;

GET_TRANSACTION '2024-09-29'






------------------- PROCEDURE TO FETCH CUSTOMER LEDGER REPORT -------------------



CREATE PROCEDURE CUSTOMER_LEDGER @C AS CHAR(5)
AS
BEGIN

	SELECT CUST.CID, CNAME, ADDRESS, CITY, PHONE, EMAIL, ODATE, OQTY, PRODUCT.PID, PDESC, PRICE, SUPPLIER.SID, SNAME, SCITY, SPHONE, OQTY*PRICE AS 'TOTAL AMOUNT'
	FROM CUST
	JOIN ORDERS
	ON CUST.CID = ORDERS.CID
	JOIN PRODUCT
	ON ORDERS.PID = PRODUCT.PID
	JOIN SUPPLIER
	ON PRODUCT.SID = SUPPLIER.SID
	WHERE CUST.CID = @C

	SELECT SUM(OQTY*PRICE) AS 'TOTAL BUSINESS GIVEN BY THE CUSTOMER'
	FROM ORDERS
	JOIN PRODUCT
	ON ORDERS.PID = PRODUCT.PID
	WHERE CID = @C
	GROUP BY CID;
	


END;



CUSTOMER_LEDGER 'C0008';
	





------------------- PROCEDURE TO FETCH CUSTOMER BILL BASED ON ORDER ID -------------------




CREATE PROCEDURE CUSTOMER_BILL @O AS CHAR(5)
AS
BEGIN

	SELECT CUST.CID, CNAME, CITY, PHONE, ORDERS.OID, ODATE, OQTY, PRODUCT.PID, PDESC, PRICE, SUPPLIER.SID, SNAME, SCITY, SPHONE, OQTY*PRICE AS 'TOTAL AMOUNT'
	FROM CUST
	JOIN ORDERS
	ON CUST.CID = ORDERS.CID
	JOIN PRODUCT 
	ON ORDERS.PID = PRODUCT.PID
	JOIN SUPPLIER
	ON PRODUCT.SID = SUPPLIER.SID
	WHERE ORDERS.OID = @O

END;

CUSTOMER_BILL 'O0001'






------------------- PROCEDURE TO FETCH SUPPLIER BILL BASED ON ORDER ID -------------------



CREATE PROCEDURE SUPPLIER_BILL @P AS CHAR(5)
AS
BEGIN

	SELECT PURCHASE.PID, PURCHASE.SID, PDESC, CATEGORY, PRICE, PQTY, PQTY*PRICE AS 'AMOUNT TO BE PAID'
	FROM PURCHASE
	JOIN PRODUCT
	ON PURCHASE.PID = PRODUCT.PID
	WHERE PRODUCT.PID = @P;

END;


SUPPLIER_BILL 'P0010';

		






----------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------- APPLYING TRIGGERS ------------------------------------------------------------------------



------- INSERT TRIGGER -------

CREATE TRIGGER TR_IN_ORD
ON ORDERS
FOR INSERT
AS
BEGIN
	
	DECLARE @QR AS INT
	DECLARE @QS AS INT

	SET @QR = (SELECT OQTY FROM INSERTED WHERE PID = (SELECT PID FROM INSERTED));
	SET @QS = (SELECT SQTY FROM STOCK WHERE PID = (SELECT PID FROM INSERTED));

	IF @QS >= @QR
	BEGIN
		
		UPDATE STOCK
		SET SQTY = SQTY - @QR
		WHERE PID = (SELECT PID FROM INSERTED)
		PRINT('ORDER ACCEPTED');

	END;

	ELSE
	BEGIN
		
		ROLLBACK; BEGIN TRANSACTION
		PRINT('INSUFFICIENT QUANTITY - ORDER REJECTED');

	END;

END;




------ CREATING FOR PURCHASE -----------

CREATE TRIGGER TR_IN_ORD
ON ORDERS
FOR INSERT
AS
BEGIN
	
	SET NOCOUNT ON
	DECLARE @QR AS INT
	DECLARE @QS AS INT
	DECLARE @RL AS INT
	DECLARE @MQ AS INT
	DECLARE @PI AS CHAR(5)
	DECLARE @SI AS CHAR(5)


	SET @PI = (SELECT PID  FROM INSERTED)
	SET @SI = (SELECT SID FROM PRODUCT WHERE PID = @PI);
	SET @QR = (SELECT OQTY FROM INSERTED WHERE PID = (SELECT PID FROM INSERTED));
	SET @QS = (SELECT SQTY FROM STOCK WHERE PID = (SELECT PID FROM INSERTED));

	IF @QS >= @QR
	BEGIN
		
		UPDATE STOCK
		SET SQTY = SQTY - @QR
		WHERE PID = (SELECT PID FROM INSERTED)

		SET @QS = (SELECT SQTY FROM STOCK WHERE PID = (SELECT PID FROM INSERTED));
		SET @RL = (SELECT ROL FROM STOCK WHERE PID = (SELECT PID FROM INSERTED));
		SET @MQ = (SELECT MOQ FROM STOCK WHERE PID = (SELECT PID FROM INSERTED));

		IF @QS <= @RL

			BEGIN

				EXEC ADD_PURCHASE @SI, @MQ

			END;

			SELECT * FROM PRODUCT WHERE PID = @PI
			SELECT * FROM STOCK WHERE PID = @PI
			SELECT * FROM ORDERS WHERE OID = (SELECT OID FROM INSERTED)

			COMMIT;
			PRINT('ORDER ACCEPTED');
		
	END;

	ELSE
		BEGIN
		
			ROLLBACK; 
			PRINT('INSUFFICIENT QUANTITY - ORDER REJECTED');

		END;

END;


UPDATE STOCK
SET SQTY = 105 WHERE PID = 'P0006'

INVENTORY_DATA

ADD_ORDER 'P0006', 'C0003', 15





---- DELETE TRIGGER ----

CREATE TRIGGER TR_DELPRO
ON PRODUCT
FOR DELETE
AS
BEGIN

	DELETE FROM STOCK
	WHERE PID = (SELECT PID FROM DELETED)

END;


---- TRANSACTION TO REVERT CHANGES CAUSED BY DELETE ----

BEGIN TRANSACTION

DELETE FROM PRODUCT 
WHERE PID = 'P0009'

ROLLBACK;





---- UPADTE TRIGGER ----


CREATE TRIGGER TR_UPD_STK
ON ORDERS
FOR UPDATE
AS
BEGIN	
	
	DECLARE @OQ AS INT
	DECLARE @NQ AS INT
	DECLARE @CQ AS INT
	DECLARE @DIF AS INT
	
	SET @OQ = (SELECT OQTY FROM DELETED WHERE PID = (SELECT PID FROM DELETED));
	SET @NQ = (SELECT OQTY FROM INSERTED WHERE PID = (SELECT PID FROM INSERTED));
	SET @CQ = (SELECT SQTY FROM STOCK WHERE PID = (SELECT PID FROM INSERTED));
	SET @DIF = @NQ - @OQ;

	IF @CQ >= @DIF
	BEGIN
		
		UPDATE STOCK
		SET SQTY = @CQ - @DIF
		WHERE PID = (SELECT PID FROM INSERTED)
		PRINT('QUANTITY UPDATED SUCCESSFULLY');

	END;

	ELSE
	BEGIN
		
		ROLLBACK;
		PRINT('UNABLE TO UPDATE - INSUFFICIENT BALANCE');
	END;

END;

BEGIN TRANSACTION

ADD_ORDER 'P0007', 'C0001', 5

UPDATE ORDERS
SET OQTY = 10
WHERE OID = 'O0007'






--------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------




